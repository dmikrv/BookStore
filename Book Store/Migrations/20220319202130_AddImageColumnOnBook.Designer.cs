// <auto-generated />
using System;
using Book_Store;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Book_Store.Migrations
{
    [DbContext(typeof(BookStoreContext))]
    [Migration("20220319202130_AddImageColumnOnBook")]
    partial class AddImageColumnOnBook
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Book_Store.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Login" }, "UQ__Account__5E55825BE607CBF8")
                        .IsUnique();

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "admin",
                            Password = "admin",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Book_Store.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Joanne",
                            LastName = "Rowling"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Stephen",
                            LastName = "King"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Fyodor",
                            LastName = "Dostoevsky",
                            Patronymic = "Mikhailovich"
                        });
                });

            modelBuilder.Entity("Book_Store.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("money");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("YearPublishing")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.HasIndex("PublisherId");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CostPrice = 30m,
                            GenreId = 1,
                            Name = "Harry Potter and the Philosopher's Stone",
                            Pages = 400,
                            Price = 45.50m,
                            PublisherId = 1,
                            YearPublishing = new DateTime(1997, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CostPrice = 20m,
                            GenreId = 1,
                            Name = "Harry Potter and the Chamber of Secrets",
                            Pages = 251,
                            Price = 61.50m,
                            PublisherId = 1,
                            YearPublishing = new DateTime(1998, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Book_Store.Entities.BookDiscount", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "DiscountId")
                        .HasName("PK__BookDisc__43A334DED432C3C2");

                    b.HasIndex("DiscountId");

                    b.ToTable("BookDiscount");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            DiscountId = 1
                        },
                        new
                        {
                            BookId = 2,
                            DiscountId = 1
                        });
                });

            modelBuilder.Entity("Book_Store.Entities.ContinuationBook", b =>
                {
                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("PredecessorBookId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "PredecessorBookId")
                        .HasName("PK__Order__A7AA244A5BBE3634");

                    b.HasIndex("PredecessorBookId");

                    b.ToTable("ContinuationBook");

                    b.HasData(
                        new
                        {
                            BookId = 2,
                            PredecessorBookId = 1
                        });
                });

            modelBuilder.Entity("Book_Store.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Book_Store.Entities.DecommissionedBook", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("BookId")
                        .HasName("PK__Decommis__3DE0C2077B695AC9");

                    b.ToTable("DecommissionedBook");
                });

            modelBuilder.Entity("Book_Store.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Percent")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ__Discount__737584F616850F2D")
                        .IsUnique();

                    b.ToTable("Discount");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2022, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Harry Potter Discount",
                            Percent = 70.0,
                            StartDate = new DateTime(2022, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Book_Store.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dystopian"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Historical fiction"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Childrens"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Art"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Development"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Self-help"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Motivational"
                        },
                        new
                        {
                            Id = 14,
                            Name = "History"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Travel"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Humor"
                        });
                });

            modelBuilder.Entity("Book_Store.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Book_Store.Entities.Order", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.HasKey("BookId", "CustomerId")
                        .HasName("PK__Order__A7AA244A0ABE3634");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Book_Store.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ__Publishe__737584F6AD39FCC7")
                        .IsUnique();

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bloomsbury Publishing"
                        });
                });

            modelBuilder.Entity("Book_Store.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ__Role__737584F635CBF13B")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user"
                        },
                        new
                        {
                            Id = 3,
                            Name = "guest"
                        });
                });

            modelBuilder.Entity("Book_Store.Entities.Account", b =>
                {
                    b.HasOne("Book_Store.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("Account_RoleId_Role_id")
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Book_Store.Entities.Book", b =>
                {
                    b.HasOne("Book_Store.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("Book_AuthorId_Author_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book_Store.Entities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("Book_GenreId_Genre_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Book_Store.Entities.Image", "Image")
                        .WithOne("Book")
                        .HasForeignKey("Book_Store.Entities.Book", "ImageId")
                        .HasConstraintName("Book_ImageId_Image_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Book_Store.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .HasConstraintName("Book_PublisherId_Publisher_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("Image");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Book_Store.Entities.BookDiscount", b =>
                {
                    b.HasOne("Book_Store.Entities.Book", "Book")
                        .WithMany("BookDiscounts")
                        .HasForeignKey("BookId")
                        .HasConstraintName("BookDiscount_BookId_Book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book_Store.Entities.Discount", "Discount")
                        .WithMany("BookDiscounts")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("BookDiscount_DiscountId_Discount_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Book_Store.Entities.ContinuationBook", b =>
                {
                    b.HasOne("Book_Store.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .HasConstraintName("ContinuationBook_BookId_Book_id")
                        .IsRequired();

                    b.HasOne("Book_Store.Entities.Book", "PredecessorBook")
                        .WithMany()
                        .HasForeignKey("PredecessorBookId")
                        .HasConstraintName("ContinuationBook_PredecessorBookId_Book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("PredecessorBook");
                });

            modelBuilder.Entity("Book_Store.Entities.DecommissionedBook", b =>
                {
                    b.HasOne("Book_Store.Entities.Book", "Book")
                        .WithOne("DecommissionedBook")
                        .HasForeignKey("Book_Store.Entities.DecommissionedBook", "BookId")
                        .HasConstraintName("DecommissionedBook_BookId_Book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Book_Store.Entities.Order", b =>
                {
                    b.HasOne("Book_Store.Entities.Book", "Book")
                        .WithMany("Orders")
                        .HasForeignKey("BookId")
                        .HasConstraintName("Order_BookId_Book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book_Store.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("Order_CustomerId_Customer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Book_Store.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Book_Store.Entities.Book", b =>
                {
                    b.Navigation("BookDiscounts");

                    b.Navigation("DecommissionedBook");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Book_Store.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Book_Store.Entities.Discount", b =>
                {
                    b.Navigation("BookDiscounts");
                });

            modelBuilder.Entity("Book_Store.Entities.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Book_Store.Entities.Image", b =>
                {
                    b.Navigation("Book");
                });

            modelBuilder.Entity("Book_Store.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Book_Store.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
